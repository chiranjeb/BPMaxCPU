float e_intra_score (int,int) ;
affine bpmax_inner_reductions_finalize 
{
	M, N, N_sec, N_tile, MR, NR, I2, J2 | 
	M >= 16 &&  N >= 96 &&  N_sec >= 1 && N_tile >= 96 && MR >=1 && NR>=1 && 0<=I2<=J2<=N_sec-1 && I2<J2
}
input
	int    seq2_t   { i,  j           |   0<=i<=N_sec-1      &&  0<=j<=N_tile-1 }; 
	float  A        { i2, j2, i3, j3  | 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile-1 &&  0<=j3<=N_tile-1 };
	float  B        { i2, j2, i3, j3  | 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile-1 &&  0<=j3<=N_tile-1 };
	float  C        { i2, j2, i3, j3  | 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile   &&  0<=j3<=N_tile-1 };


output
	float FTable_C_section { i3, j3  |  0<=i3<=N_tile  && 0<=j3<=N_tile-1 };

local
	float FTable_C_pointwise_diag { i3, j3  |  0<=i3<=N_tile  && 0<=j3<=N_tile-1 };

let

  FTable_C_pointwise_diag[i3,j3] = 
       case 
         { | i3 == N_tile } : C[I2+1, J2, i3, j3];
         { | i3 < N_tile  }: 
        	  max( case { | I2 == J2-1 &&  i3 - j3  > N_tile -4 }: 0;
        	   	   { | I2 == J2-1 &&  i3 - j3  <= N_tile -4  } || { | I2 < J2-1 }:
        	   	       case 
        	   	          {|j3 == 0 } : C[I2, J2-1,   i3, N_tile-1 ]  + e_intra_score(seq2_t[I2, i3], seq2_t[J2, j3]) ;
		                  {|j3 >  0 } : C[ I2, J2,   i3+1, j3-1 ]     + e_intra_score(seq2_t[I2, i3], seq2_t[J2, j3]);
		               esac;
		        esac, FTable_C_section);
		  esac;


  FTable_C_section[i3,j3] = 
       case 
         { | i3 == N_tile } : 0;
         { | i3 < N_tile  }: 
        	   max( FTable_C_pointwise_diag [i3, j3], 
        	   	    reduce(max, [k3], {|i3<=k3<=N_tile-1} : A[I2, J2, i3, k3] + C[I2, J2, k3+1, j3]),
		             case {| j3 > 0 } : reduce(min, [k3], {|0<=k3<=j3-1} : C[I2, J2, i3, k3] + B[I2, J2, k3+1, j3]);
		    			  {| j3 == 0 } : 0; esac);
		    esac;
.	


affine bpmax_inner_reductions_diagonal_tile 
{
	M, N, N_sec, N_tile, MR, NR, I2, J2 | 
	M >= 16 &&  N >= 96 &&  N_sec >= 1 && N_tile >= 96 && MR >=1 && NR>=1 && 0<=I2<=J2<=N_sec-1
}
input
   int   seq2_t  { i, j    | 0<=i<=N_sec-1   &&  0<=j<=N_tile-1  }; 
   float A       { i2, j2  | 0<=i2<=N_tile-1 &&  0<=j2<=N_tile-1 };
   float B       { i2, j2  | 0<=i2<=N_tile-1 &&  0<=j2<=N_tile-1 };
output
   float FTable_C_section { i2, j2| 0<=i2<=N_tile-1 && 0<=j2<=N_tile-1 };
let
	FTable_C_section[i2,j2] = 
		case
			{ | i2 >= j2 } : FTable_C_section[i2, j2];
			{ | i2 < j2  } : 
					max ( FTable_C_section[i2, j2], 
			              		case  {|j2-i2  > 3}: FTable_C_section[i2+1, j2-1]  + e_intra_score(seq2_t[I2, i2], seq2_t[J2, j2]);
			 	                	  {|j2-i2  <=3}: 0; esac, 
            		       reduce(max, [k2],  {|i2<=k2<j2} : FTable_C_section[i2, k2] + B[k2+1, j2]),
            			   reduce(max, [k2],  {|i2<=k2<j2} : A[i2, k2]     +  FTable_C_section[k2+1, j2]));
        esac;
.		       
