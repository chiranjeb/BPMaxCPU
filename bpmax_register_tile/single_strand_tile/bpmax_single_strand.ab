float e_intra_score (int,int) ;
float e_inter_score (int,int) ;


affine transform_reverse_1D_to_2D
{
	N, N_sec, N_tile, I2 | 
	N >= 16 &&  N_sec >= 2 && N_tile >=4 && 0 <= I2 <= N_sec-1
}
input
    int  seq2          { i | 0 <= i < N} ;
output
	int  seq2_t        { j | 0<=j<=N_tile-1 }; 
let
	seq2_t [i] = 0; // todo by hand
.
 


affine bpmax_single_strand_s2_tile 
{
	M, N, N_sec, N_tile, MR, NR | 
	M >= 3 &&  N >= 16 &&  N_sec >= 2 && N_tile >=4 && MR >=1 && NR>=1	
}
input
	  int   seq2_t   { i,  j      | 0<=i<=N_sec-1      &&  0<=j<=N_tile-1 }; 
output
	  float S_A { i2, j2, i3, j3  | 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile-1  && 0<=j3<=N_tile-1 };
	  float S_B { i2, j2, i3, j3  | 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile-1  && 0<=j3<=N_tile-1 };
	  float S_C { i2, j2, i3, j3  | 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile    && 0<=j3<=N_tile-1 };
let
   S_A[i2, j2, i3, j3] = 0;
   S_B[i2, j2, i3, j3] = 0;
   S_C[i2, j2, i3, j3] = 0;
.

affine bpmax 
{
	M, N, N_sec, N_tile, MR, NR | 
	M >= 3 &&  N >= 16 &&  N_sec >= 2 && N_tile >=4 && MR >=1 && NR>=1
}
input
	int seq2 {i| 0 <= i < N} ;
output
	float S2           { k,  i,  j            | 0<=k<1             &&  0<=i<=j<=N-1 };
local
	float S2_A         { k,  i2, j2, i3, j3   | 0<=k<1   &&  0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile-1 &&  0<=j3<=N_tile-1 };
	float S2_B         { k,  i2, j2, i3, j3   | 0<=k<1   &&  0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile-1 &&  0<=j3<=N_tile-1 };
	float S2_C         { k,  i2, j2, i3, j3   | 0<=k<1   &&  0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile   &&  0<=j3<=N_tile-1 };
	int   seq2_t       { i,  j                | 0<=i<=N_sec-1      &&  0<=j<=N_tile-1 }; 
let
    // Transform seq2: Reverse and then 2D transform N_sec-1 x N_tile-1
	use {ei | 0<=ei<=N_sec-1 }  
	    transform_reverse_1D_to_2D[N, N_sec, N_tile, ei] 
	    (
	    	(ei, i->i)@seq2
	    ) returns  (seq2_t);
	
	 
	// Compute single strand table - S2: Tiled
	use { ei | ei>=0 && 1>ei} 
		bpmax_single_strand_s2_tile[M, N, N_sec, N_tile, MR, NR]  
    	(
        	(ei, i, j->i, j)@seq2_t
    	)
		returns (S2_A, S2_B, S2_C);
	
  

.


