affine matrix_max_plus
{
	N, N_sec, N_tile, START_I, START_K, START_J, MR, NR, I2, J2, K2 | 
	N >= 8 &&  N_sec >= 2 && N_tile >=4  && 0<=START_I<N_tile && 0<=START_J<N_tile && 0<=START_K<N_tile && MR >=1 && NR>=1 &&
	0<=I2<=J2<=N_sec-1 && I2 <= K2 <= J2 
}
input
	float A       { i3, j3  | START_I<=i3<=N_tile-1 &&  START_K<=j3<=N_tile-1 };
	float B       { i3, j3  | START_K<=i3<=N_tile-1 &&  START_J<=j3<=N_tile-1 };
output
    float C { i3, j3  | START_I<=i3<=N_tile-1 && START_J<=j3<=N_tile-1  };
let
	C[i3,j3] = reduce(max, [k], {|0<=k<=N_tile-1}: A[i3, k] + B[k, j3]);
.	
