
float e_intra_score (int,int) ;
float e_inter_score (int,int) ;


affine transform_2D_to_4D
{
	M, N, N_sec, N_tile, MR, NR, I2, J2 | 
	M >= 16 &&  N >= 96 &&  N_sec >= 1 && N_tile >= 96 && MR >=1 && NR>=1 && 0<=I2<=J2<=N_sec-1
}
input
	float T_2D   { i,  j  | 0<=i<=j<N };
output
	float T_4D   { i3, j3 |  0<=i3<=N_tile-1 && 0<=j3<=N_tile-1 };
	  
let
	 T_4D[i3, j3] = 0;	
.


affine bpmax_elementwise_ops
{
	M, N, N_sec, N_tile, MR, NR, I1, J1 | 
	M >= 16 &&  N >= 96 &&  N_sec >= 1 && N_tile >= 96 && MR >=1 && NR>=1 && 0<=I1<=J1<=M-1	
}
input
	int seq1 {i| 0 <= i < M} ;
	int seq2 {i| 0 <= i < N} ;
	float S1 {i,j| 0 <= i <= j < M };
	float S2 {i,j| 0 <= i <= j < N };
	float FTable_4D  {i1,j1,i2,j2| 0<=i1<=j1<=M-1 && 0<=i2<=j2<=N-1};
	
output
	float FTable_C  { i2, j2, i3, j3 | 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile-1 && 0<=j3<=N_tile-1 };

local
	float FTable_2D  {i,j| 0<=i<=j<=N-1};
	  
let
	 FTable_2D[i2, j2] = case
		{ | I1<= J1  && j2< i2} : S1[I1, J1];
		{ | J1 < I1  && i2<=j2} : S2[i2, j2];
		{ | I1 == J1 && i2 == j2} : e_inter_score(seq1[I1], seq2[N-i2-1]); 
		{ | I1<J1 && i2<j2} || {|I1 ==J1 && i2<j2} || {|I1<J1 && i2==j2} : 			
		        max(case {|J1-I1 >  3}: FTable_4D[I1+1, J1-1, i2, j2] + e_intra_score(seq1[I1], seq1[J1]);
				       {|J1-I1 <= 3}: 0; esac, S1[I1, J1] + S2[i2, j2]);
		esac;
		
	use { ei2, ej2 | 0<=ei2<=ej2<=N_sec-1 && ei2 <= ej2} 
    	 transform_2D_to_4D[M, N, N_sec, N_tile, MR, NR, ei2, ej2]  
    			(
    				(ei2, ej2, i2, j2 -> i2, j2)@FTable_2D
    			)
	  		returns (FTable_C);
.

