affine bpmax_max_r0_r3_r4_instance
{   
	M, N, N_sec, N_tile, I1, J1, K1 | 
	M >= 16 &&  N >= 96 &&  N_sec >= 1 && N_tile >= 96 && 0<=I1<=J1<=M-1 && I1<=K1<J1 
}
	input
	  float S1 {i, j| 0 <= i <= j < M };  
      float FTable_6D { i1, j1, i2, j2, i3, j3 | 0<=i1<=j1<=M-1 &&  0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile && 0<=j3<=N_tile-1 };
	output
   	  float FTable_4D { i2, j2, i3, j3| 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile && 0<=j3<=N_tile-1 };
	let
		FTable_4D [i2, j2, i3, j3] = 0;
.


affine bpmax_outer_reductions
{   
	M, N, N_sec, N_tile, I1, J1, i3_offset, j3_offset | 
	M >= 16 &&  N >= 96 &&  N_sec >= 1 && N_tile >= 96 && 0<=I1<=J1<=M-1
}
	input
	   float S1        {  i, j | 0 <= i <= j <=  M-1 };  
       float FTable_6D { i1, j1, i2, j2, i3, j3 | 0<=i1<=j1<=M-1 &&  0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile && 0<=j3<=N_tile-1 };
    output
	   float FTable_4D       { i2, j2, i3, j3| 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile && 0<=j3<=N_tile-1 };
	local
	   float FTable_4D_dummy { k, i2, j2, i3, j3| I1<=k<J1 && 0<=i2<=j2<=N_sec-1 &&  0<=i3<=N_tile && 0<=j3<=N_tile-1 };
	let
 	  use { ek | I1<=ek<J1 } 
	  		bpmax_max_r0_r3_r4_instance[M, N, N_sec, N_tile, I1, J1, ek] ( 
	        (ek, i, j -> i, j)@S1,
	        (ek, i1, j1, i2, j2, i3, j3 -> i1, j1, i2, j2, i3, j3)@FTable_6D
	        )
      returns (FTable_4D_dummy);
      FTable_4D [ i1, j1, i2, j2] = 0;
.
 
